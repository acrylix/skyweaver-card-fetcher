import nodeHtmlToImage from 'node-html-to-image';
import pug from 'pug';
import { CardData } from './types';
import { decode } from 'bs58';
import { join } from 'path';
import { randomBytes } from 'crypto';

export interface Deck {
    prisms: string;
    cardIds: number[];
}

export interface DeckListImageResult {
    url: string;
    fileName: string;
}

const render = pug.compileFile(join(__dirname, '..', 'templates', 'preview.pug'));

export async function generateDeckListImage(deckString: string, rawCards: CardData): Promise<DeckListImageResult | undefined> {
    const deck = parseDeckString(deckString);
    if (!deck) return undefined;
    if (deck.cardIds.length < 1 || deck.cardIds.length > 30) return undefined;
    const url = `https://beta.skyweaver.net/items/deck/${deck.prisms}/${deckString}`;
    const fileName = `./deckImages/image${randomBytes(16).toString('hex')}.png`;
    const cards = deck.cardIds
        .filter(id => id in rawCards)
        .map(id => rawCards[id])
        .sort((a, b) => a.manaCost - b.manaCost);

    const html = render({ cards, width: Math.ceil(cards.length / 10) });
    await nodeHtmlToImage({
        output: fileName,
        html,
        puppeteerArgs: {"args": ['--no-sandbox', '--disable-setuid-sandbox']}
    });

    return { url, fileName };
}

function parseDeckString(deckString: string): Deck | undefined {
  const version = deckString.slice(6, 8);
  const prisms = deckString.slice(3, 6);
  if (!deckString.startsWith("SWx") || (version !== "01" && version !== "02"))
    return undefined;
  try {
    switch (version) {
      case "01": {
        const cardIds = decode(deckString.slice(8))
          .toString()
          .split(",")
          //@ts-ignore
          .map((n) => version01To02Mapping[parseInt(n)]);
        cardIds.forEach((cardId) => {
          if (typeof cardId !== "number") {
            throw new Error("Invalid v01 card id");
          }
        });
        return {
          prisms,
          cardIds,
        };
      }
      case "02": {
        const bytes = decode(deckString.slice(8));
        if (isBigEndian) {
          bytes.swap16();
        }
        const cardIds = new Uint16Array(
          bytes.buffer,
          bytes.byteOffset,
          bytes.length / 2
        );
        return {
          prisms: deckString.slice(3, 6),
          cardIds: Array.from(cardIds),
        };
      }
    }
  } catch (err) {
    return undefined;
  }
}

const isBigEndian = (() => {
  const a = new Uint32Array([0x12345678]);
  const b = new Uint8Array(a.buffer, a.byteOffset, a.byteLength);
  return b[0] == 0x12;
})();


const version01To02Mapping = {
  36: 0,
  53: 1,
  58: 2,
  66: 3,
  77: 4,
  102: 5,
  113: 6,
  235: 7,
  237: 8,
  244: 9,
  248: 10,
  250: 11,
  269: 12,
  303: 13,
  312: 14,
  316: 15,
  346: 16,
  366: 17,
  409: 18,
  410: 19,
  416: 20,
  423: 21,
  438: 22,
  477: 23,
  501: 24,
  507: 25,
  514: 26,
  558: 27,
  567: 28,
  591: 29,
  632: 30,
  634: 31,
  646: 32,
  657: 33,
  659: 34,
  666: 35,
  667: 36,
  669: 37,
  687: 38,
  694: 39,
  712: 40,
  724: 41,
  726: 42,
  742: 43,
  756: 44,
  760: 45,
  764: 46,
  779: 47,
  785: 48,
  804: 49,
  807: 50,
  809: 51,
  813: 52,
  815: 53,
  821: 54,
  831: 55,
  846: 56,
  849: 57,
  851: 58,
  855: 59,
  869: 60,
  877: 61,
  881: 62,
  903: 63,
  917: 64,
  918: 65,
  919: 66,
  933: 67,
  936: 68,
  941: 69,
  951: 70,
  960: 71,
  971: 72,
  973: 73,
  975: 74,
  980: 75,
  995: 76,
  999: 77,
  1000: 78,
  1032: 79,
  1051: 80,
  1057: 81,
  1060: 82,
  1064: 83,
  1082: 84,
  1083: 85,
  1095: 86,
  1096: 87,
  1097: 88,
  1110: 89,
  1111: 90,
  1131: 91,
  1141: 92,
  1142: 93,
  1146: 94,
  1163: 95,
  1177: 96,
  1193: 97,
  1194: 98,
  1195: 99,
  51: 1000,
  55: 1001,
  141: 1002,
  186: 1003,
  191: 1004,
  201: 1005,
  219: 1006,
  239: 1007,
  272: 1008,
  293: 1009,
  298: 1010,
  308: 1011,
  326: 1012,
  345: 1013,
  350: 1014,
  357: 1015,
  395: 1016,
  430: 1017,
  435: 1018,
  439: 1019,
  441: 1020,
  448: 1021,
  453: 1022,
  508: 1023,
  518: 1024,
  525: 1025,
  526: 1026,
  530: 1027,
  533: 1028,
  560: 1029,
  563: 1030,
  571: 1031,
  602: 1032,
  605: 1033,
  635: 1034,
  641: 1035,
  658: 1036,
  663: 1037,
  683: 1038,
  697: 1039,
  707: 1040,
  717: 1041,
  720: 1042,
  728: 1043,
  745: 1044,
  758: 1045,
  778: 1046,
  784: 1047,
  787: 1048,
  788: 1049,
  794: 1050,
  797: 1051,
  798: 1052,
  812: 1053,
  816: 1054,
  830: 1055,
  832: 1056,
  839: 1057,
  842: 1058,
  847: 1059,
  852: 1060,
  854: 1061,
  864: 1062,
  865: 1063,
  899: 1064,
  964: 1065,
  977: 1066,
  978: 1067,
  981: 1068,
  983: 1069,
  990: 1070,
  994: 1071,
  1006: 1072,
  1028: 1073,
  1030: 1074,
  1033: 1075,
  1047: 1076,
  1049: 1077,
  1058: 1078,
  1072: 1079,
  1085: 1080,
  1094: 1081,
  1106: 1082,
  1112: 1083,
  1114: 1084,
  1118: 1085,
  1124: 1086,
  1126: 1087,
  1127: 1088,
  1135: 1089,
  1137: 1090,
  1153: 1091,
  1154: 1092,
  1158: 1093,
  1171: 1094,
  1178: 1095,
  1189: 1096,
  1190: 1097,
  1191: 1098,
  1197: 1099,
  8: 2000,
  29: 2001,
  35: 2002,
  103: 2003,
  110: 2004,
  111: 2005,
  115: 2006,
  117: 2007,
  123: 2008,
  145: 2009,
  200: 2010,
  204: 2011,
  260: 2012,
  267: 2013,
  287: 2014,
  290: 2015,
  304: 2016,
  307: 2017,
  323: 2018,
  340: 2019,
  396: 2020,
  403: 2021,
  436: 2022,
  442: 2023,
  445: 2024,
  449: 2025,
  467: 2026,
  470: 2027,
  475: 2028,
  487: 2029,
  499: 2030,
  502: 2031,
  513: 2032,
  523: 2033,
  557: 2034,
  562: 2035,
  572: 2036,
  575: 2037,
  576: 2038,
  593: 2039,
  615: 2040,
  636: 2041,
  637: 2042,
  647: 2043,
  648: 2044,
  649: 2045,
  661: 2046,
  671: 2047,
  675: 2048,
  676: 2049,
  716: 2050,
  721: 2051,
  750: 2052,
  753: 2053,
  755: 2054,
  762: 2055,
  763: 2056,
  791: 2057,
  823: 2058,
  829: 2059,
  833: 2060,
  858: 2061,
  866: 2062,
  876: 2063,
  880: 2064,
  884: 2065,
  892: 2066,
  921: 2067,
  923: 2068,
  924: 2069,
  926: 2070,
  934: 2071,
  945: 2072,
  956: 2073,
  961: 2074,
  963: 2075,
  969: 2076,
  1007: 2077,
  1019: 2078,
  1035: 2079,
  1037: 2080,
  1048: 2081,
  1054: 2082,
  1079: 2083,
  1080: 2084,
  1086: 2085,
  1092: 2086,
  1099: 2087,
  1107: 2088,
  1109: 2089,
  1115: 2090,
  1120: 2091,
  1123: 2092,
  1149: 2093,
  1160: 2094,
  1181: 2095,
  1183: 2096,
  1187: 2097,
  1192: 2098,
  1198: 2099,
  13: 3000,
  28: 3001,
  44: 3002,
  45: 3003,
  56: 3004,
  62: 3005,
  67: 3006,
  75: 3007,
  80: 3008,
  88: 3009,
  91: 3010,
  98: 3011,
  108: 3012,
  121: 3013,
  127: 3014,
  152: 3015,
  199: 3016,
  226: 3017,
  245: 3018,
  285: 3019,
  300: 3020,
  315: 3021,
  351: 3022,
  377: 3023,
  379: 3024,
  383: 3025,
  394: 3026,
  401: 3027,
  427: 3028,
  447: 3029,
  461: 3030,
  476: 3031,
  489: 3032,
  500: 3033,
  517: 3034,
  548: 3035,
  569: 3036,
  573: 3037,
  590: 3038,
  621: 3039,
  622: 3040,
  626: 3041,
  640: 3042,
  651: 3043,
  690: 3044,
  693: 3045,
  696: 3046,
  733: 3047,
  737: 3048,
  741: 3049,
  765: 3050,
  780: 3051,
  782: 3052,
  783: 3053,
  805: 3054,
  818: 3055,
  853: 3056,
  857: 3057,
  887: 3058,
  910: 3059,
  912: 3060,
  925: 3061,
  932: 3062,
  947: 3063,
  955: 3064,
  968: 3065,
  970: 3066,
  979: 3067,
  1001: 3068,
  1003: 3069,
  1015: 3070,
  1020: 3071,
  1024: 3072,
  1026: 3073,
  1031: 3074,
  1041: 3075,
  1042: 3076,
  1044: 3077,
  1045: 3078,
  1056: 3079,
  1065: 3080,
  1071: 3081,
  1073: 3082,
  1074: 3083,
  1116: 3084,
  1117: 3085,
  1119: 3086,
  1121: 3087,
  1148: 3088,
  1150: 3089,
  1151: 3090,
  1157: 3091,
  1162: 3092,
  1166: 3093,
  1169: 3094,
  1173: 3095,
  1175: 3096,
  1176: 3097,
  1188: 3098,
  1199: 3099,
  7: 4000,
  27: 4001,
  39: 4002,
  69: 4003,
  83: 4004,
  95: 4005,
  125: 4006,
  134: 4007,
  195: 4008,
  258: 4009,
  261: 4010,
  317: 4011,
  328: 4012,
  336: 4013,
  348: 4014,
  381: 4015,
  424: 4016,
  465: 4017,
  474: 4018,
  497: 4019,
  528: 4020,
  541: 4021,
  559: 4022,
  589: 4023,
  610: 4024,
  623: 4025,
  627: 4026,
  670: 4027,
  705: 4028,
  709: 4029,
  714: 4030,
  731: 4031,
  732: 4032,
  736: 4033,
  744: 4034,
  749: 4035,
  761: 4036,
  790: 4037,
  792: 4038,
  796: 4039,
  806: 4040,
  808: 4041,
  810: 4042,
  820: 4043,
  838: 4044,
  841: 4045,
  845: 4046,
  848: 4047,
  859: 4048,
  871: 4049,
  873: 4050,
  882: 4051,
  893: 4052,
  896: 4053,
  897: 4054,
  901: 4055,
  905: 4056,
  911: 4057,
  914: 4058,
  920: 4059,
  927: 4060,
  939: 4061,
  940: 4062,
  944: 4063,
  948: 4064,
  953: 4065,
  954: 4066,
  959: 4067,
  962: 4068,
  974: 4069,
  984: 4070,
  985: 4071,
  993: 4072,
  1013: 4073,
  1021: 4074,
  1023: 4075,
  1029: 4076,
  1036: 4077,
  1038: 4078,
  1040: 4079,
  1046: 4080,
  1050: 4081,
  1053: 4082,
  1062: 4083,
  1069: 4084,
  1076: 4085,
  1077: 4086,
  1084: 4087,
  1089: 4088,
  1090: 4089,
  1105: 4090,
  1108: 4091,
  1113: 4092,
  1133: 4093,
  1134: 4094,
  1145: 4095,
  1147: 4096,
  1179: 4097,
  1182: 4098,
  1196: 4099,
  1: 20000,
  3: 20001,
  4: 20002,
  25: 20003,
  31: 20004,
  34: 20005,
  41: 20006,
  57: 20007,
  60: 20008,
  84: 20009,
  104: 20010,
  128: 20011,
  184: 20012,
  193: 20013,
  213: 20014,
  234: 20015,
  341: 20016,
  384: 20017,
  431: 20018,
  452: 20019,
  455: 20020,
  473: 20021,
  493: 20022,
  527: 20023,
  552: 20024,
  570: 20025,
  574: 20026,
  579: 20027,
  587: 20028,
  604: 20029,
  633: 20030,
  639: 20031,
  653: 20032,
  678: 20033,
  711: 20034,
  799: 20035,
  800: 20036,
  825: 20037,
  837: 20038,
  840: 20039,
  843: 20040,
  891: 20041,
  894: 20042,
  895: 20043,
  898: 20044,
  922: 20045,
  976: 20046,
  988: 20047,
  989: 20048,
  1004: 20049,
  1017: 20050,
  1018: 20051,
  1067: 20052,
  1093: 20053,
  1098: 20054,
  1129: 20055,
  1155: 20056,
  1180: 20057,
  100000: 30000,
  100001: 30001,
  100002: 30002,
  100003: 30003,
  100004: 30004,
  100005: 30005,
  100006: 30006,
  100007: 30007,
  100008: 30008,
  100009: 30009,
  100010: 30010,
  100011: 30011,
  100012: 30012,
  100013: 30013,
  100014: 30014,
  100015: 30015,
  100016: 30016,
  100017: 30017,
  100018: 30018,
  100019: 30019,
  100020: 30020,
  100021: 30021,
  100022: 30022,
  100023: 30023,
  100024: 30024,
  100025: 30025,
  100026: 30026,
  100027: 30027,
  100028: 30028,
  100029: 30029,
  100030: 30030,
  100031: 30031,
  100032: 30032,
  100033: 30033,
  100034: 30034,
  100035: 30035,
  100036: 30036,
  100037: 30037,
  100038: 30038,
  100039: 30039,
  100040: 30040,
  100041: 30041,
  100042: 30042,
  100043: 30043,
  100044: 30044,
  100045: 30045,
  100046: 30046,
  100047: 30047,
  100048: 30048,
  100049: 30049,
  100050: 30050,
  100051: 30051,
  100052: 30052,
  100053: 30053,
  100054: 30054,
  100055: 30055,
  100056: 30056,
  100057: 30057,
  100058: 30058,
  100059: 30059,
  100060: 30060,
  100061: 30061,
  100062: 30062,
  100063: 30063,
  100064: 30064,
  100200: 30065,
  100201: 30066,
  100202: 30067,
  100203: 30068,
  100204: 30069,
  100205: 30070,
  100206: 30071,
  100207: 30072,
  100208: 30073,
  100209: 30074,
  100210: 30075,
  100998: 30076,
  100999: 30077,
};
